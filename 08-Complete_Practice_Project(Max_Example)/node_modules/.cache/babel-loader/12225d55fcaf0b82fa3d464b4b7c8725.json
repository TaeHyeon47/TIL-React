{"ast":null,"code":"var _jsxFileName = \"/Users/jotaehyeon/Desktop/TIL-React/08-Complete_Practice_Project(Max_Example)/src/components/Users/AddUser.js\",\n    _s = $RefreshSig$();\n\n//? Ref allow us to get access to other DOM elements\nimport React, { useState, useRef } from 'react';\nimport Card from '../UI/Card'; // 자바스크립트 파일은 '.js'를 붙이지 않아도 된다.\n\nimport Button from '../UI/Button';\nimport classes from './AddUser.module.css';\nimport Wrapper from '../Helpers/Wrapper';\nimport ErrorModal from '../UI/ErrorModal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AddUser = props => {\n  _s();\n\n  // Ref takes a default value you wanna initialize it to (default값은 undefined)\n  // we can let React know that we wanna connect a ref to a HTML element by going to that element\n  // to which we wanna connect the ref and adding a special prop there, the ref prop.\n  // Just like the key prop, that's a built-in prop which you can add to any HTML element\n  //? you can connect any HTML element to one of your references.\n  //? You will very often do that for inputs because you wanna fetch input data, for example,\n  //? but you can do with any element.\n  //? The Ref value always is an object which always has a current prop\n  //? Ref는 항상 current prop을 가지는 객체를 가지고 있다.\n  //? The current prop holds the actual value that ref is connected with.\n  const nameInputRef = useRef();\n  const ageInputRef = useRef(); // 처음 input에 값이 없기 때문에 State의 초기값은 ''으로 입력된다.\n\n  const [enteredUsername, setEnteredUsername] = useState('');\n  const [enteredAge, setEnteredAge] = useState('');\n  const [error, setError] = useState();\n\n  const addUserHandler = event => {\n    event.preventDefault();\n    const enteredname = nameInputRef.current.value;\n    const enteredUserAge = ageInputRef.current.value; // Trim will remove any excess white space.\n\n    if (enteredname.trim().length === 0 || enteredUserAge.trim().length === 0) {\n      setError({\n        title: 'Invalid input',\n        message: 'Please enter a valid name and age (non-empty values).'\n      });\n      return; // 리턴되면서 addUserHandler의 코드는 실행되지 않는다. (return statements finished the function execution.)\n    } // enteredAge가 String이지만, JS에서 일반적으로 숫자로 비교가 가능하다. 하지만, 형변환을 하는 것이 더 안전하기 때문에 +를 붙이는 것이 좋다.\n\n\n    if (+enteredUserAge < 1) {\n      setError({\n        title: 'Invalid age',\n        message: 'Please enter a valid age (> 0).'\n      });\n      return;\n    }\n\n    console.log(enteredUsername, enteredAge);\n    props.onAddUser(enteredUsername, enteredAge);\n    setEnteredUsername('');\n    setEnteredAge('');\n  };\n\n  const usernameChangeHandler = event => {\n    setEnteredUsername(event.target.value);\n  };\n\n  const ageChangeHandler = event => {\n    setEnteredAge(event.target.value);\n  };\n\n  const errorHandler = () => {\n    // Null is treated as a falsy value,\n    setError(null);\n  };\n\n  return (\n    /*#__PURE__*/\n    // Wrapper has no other meaning than fulfilling this JSX requirement with my wrapper.\n    _jsxDEV(Wrapper, {\n      children: [error && /*#__PURE__*/_jsxDEV(ErrorModal, {\n        title: error.title,\n        message: error.message,\n        onConfirm: errorHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        className: classes.input,\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: addUserHandler,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"username\",\n            children: \"Username\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"username\",\n            type: \"text\",\n            value: enteredUsername,\n            onChange: usernameChangeHandler,\n            ref: nameInputRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"age\",\n            children: \"Age (Years)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"age\",\n            type: \"number\",\n            value: enteredAge,\n            onChange: ageChangeHandler,\n            ref: ageInputRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            children: \"Add User\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }, this)\n  );\n};\n\n_s(AddUser, \"U9tAPrPzq0ATqLCQlFPOYIvOVxY=\");\n\n_c = AddUser;\nexport default AddUser;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddUser\");","map":{"version":3,"names":["React","useState","useRef","Card","Button","classes","Wrapper","ErrorModal","AddUser","props","nameInputRef","ageInputRef","enteredUsername","setEnteredUsername","enteredAge","setEnteredAge","error","setError","addUserHandler","event","preventDefault","enteredname","current","value","enteredUserAge","trim","length","title","message","console","log","onAddUser","usernameChangeHandler","target","ageChangeHandler","errorHandler","input"],"sources":["/Users/jotaehyeon/Desktop/TIL-React/08-Complete_Practice_Project(Max_Example)/src/components/Users/AddUser.js"],"sourcesContent":["//? Ref allow us to get access to other DOM elements\nimport React, { useState, useRef } from 'react';\nimport Card from '../UI/Card'; // 자바스크립트 파일은 '.js'를 붙이지 않아도 된다.\nimport Button from '../UI/Button';\nimport classes from './AddUser.module.css';\nimport Wrapper from '../Helpers/Wrapper';\nimport ErrorModal from '../UI/ErrorModal';\n\nconst AddUser = (props) => {\n  // Ref takes a default value you wanna initialize it to (default값은 undefined)\n  // we can let React know that we wanna connect a ref to a HTML element by going to that element\n  // to which we wanna connect the ref and adding a special prop there, the ref prop.\n  // Just like the key prop, that's a built-in prop which you can add to any HTML element\n  //? you can connect any HTML element to one of your references.\n  //? You will very often do that for inputs because you wanna fetch input data, for example,\n  //? but you can do with any element.\n  //? The Ref value always is an object which always has a current prop\n  //? Ref는 항상 current prop을 가지는 객체를 가지고 있다.\n  //? The current prop holds the actual value that ref is connected with.\n\n  const nameInputRef = useRef();\n  const ageInputRef = useRef();\n\n  // 처음 input에 값이 없기 때문에 State의 초기값은 ''으로 입력된다.\n  const [enteredUsername, setEnteredUsername] = useState('');\n  const [enteredAge, setEnteredAge] = useState('');\n  const [error, setError] = useState();\n\n  const addUserHandler = (event) => {\n    event.preventDefault();\n    const enteredname = nameInputRef.current.value;\n    const enteredUserAge = ageInputRef.current.value;\n    // Trim will remove any excess white space.\n    if (enteredname.trim().length === 0 || enteredUserAge.trim().length === 0) {\n      setError({\n        title: 'Invalid input',\n        message: 'Please enter a valid name and age (non-empty values).',\n      });\n      return; // 리턴되면서 addUserHandler의 코드는 실행되지 않는다. (return statements finished the function execution.)\n    }\n    // enteredAge가 String이지만, JS에서 일반적으로 숫자로 비교가 가능하다. 하지만, 형변환을 하는 것이 더 안전하기 때문에 +를 붙이는 것이 좋다.\n    if (+enteredUserAge < 1) {\n      setError({\n        title: 'Invalid age',\n        message: 'Please enter a valid age (> 0).',\n      });\n      return;\n    }\n\n    console.log(enteredUsername, enteredAge);\n    props.onAddUser(enteredUsername, enteredAge);\n\n    setEnteredUsername('');\n    setEnteredAge('');\n  };\n\n  const usernameChangeHandler = (event) => {\n    setEnteredUsername(event.target.value);\n  };\n\n  const ageChangeHandler = (event) => {\n    setEnteredAge(event.target.value);\n  };\n\n  const errorHandler = () => {\n    // Null is treated as a falsy value,\n    setError(null);\n  };\n\n  return (\n    // Wrapper has no other meaning than fulfilling this JSX requirement with my wrapper.\n    <Wrapper>\n      {/* if error would be undefined well nothing would be rendered here for this line. */}\n      {error && (\n        <ErrorModal\n          title={error.title}\n          message={error.message}\n          onConfirm={errorHandler}\n        />\n      )}\n      <Card className={classes.input}>\n        <form onSubmit={addUserHandler}>\n          {/* \n         'htmlfor' : the prop name for assigning that for attribute to a label.\n          that they understand which label belongs to which input.\n          htmlfor과 id를 username으로 연결 \n      */}\n          <label htmlFor='username'>Username</label>\n          <input\n            id='username'\n            type='text'\n            value={enteredUsername}\n            onChange={usernameChangeHandler}\n            ref={nameInputRef}\n          />\n          <label htmlFor='age'>Age (Years)</label>\n          <input\n            id='age'\n            type='number'\n            value={enteredAge}\n            onChange={ageChangeHandler}\n            ref={ageInputRef}\n          />\n          <Button type='submit'>Add User</Button>\n        </form>\n      </Card>\n    </Wrapper>\n  );\n};\n\nexport default AddUser;\n"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,QAAwC,OAAxC;AACA,OAAOC,IAAP,MAAiB,YAAjB,C,CAA+B;;AAC/B,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,UAAP,MAAuB,kBAAvB;;;AAEA,MAAMC,OAAO,GAAIC,KAAD,IAAW;EAAA;;EACzB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA,MAAMC,YAAY,GAAGR,MAAM,EAA3B;EACA,MAAMS,WAAW,GAAGT,MAAM,EAA1B,CAbyB,CAezB;;EACA,MAAM,CAACU,eAAD,EAAkBC,kBAAlB,IAAwCZ,QAAQ,CAAC,EAAD,CAAtD;EACA,MAAM,CAACa,UAAD,EAAaC,aAAb,IAA8Bd,QAAQ,CAAC,EAAD,CAA5C;EACA,MAAM,CAACe,KAAD,EAAQC,QAAR,IAAoBhB,QAAQ,EAAlC;;EAEA,MAAMiB,cAAc,GAAIC,KAAD,IAAW;IAChCA,KAAK,CAACC,cAAN;IACA,MAAMC,WAAW,GAAGX,YAAY,CAACY,OAAb,CAAqBC,KAAzC;IACA,MAAMC,cAAc,GAAGb,WAAW,CAACW,OAAZ,CAAoBC,KAA3C,CAHgC,CAIhC;;IACA,IAAIF,WAAW,CAACI,IAAZ,GAAmBC,MAAnB,KAA8B,CAA9B,IAAmCF,cAAc,CAACC,IAAf,GAAsBC,MAAtB,KAAiC,CAAxE,EAA2E;MACzET,QAAQ,CAAC;QACPU,KAAK,EAAE,eADA;QAEPC,OAAO,EAAE;MAFF,CAAD,CAAR;MAIA,OALyE,CAKjE;IACT,CAX+B,CAYhC;;;IACA,IAAI,CAACJ,cAAD,GAAkB,CAAtB,EAAyB;MACvBP,QAAQ,CAAC;QACPU,KAAK,EAAE,aADA;QAEPC,OAAO,EAAE;MAFF,CAAD,CAAR;MAIA;IACD;;IAEDC,OAAO,CAACC,GAAR,CAAYlB,eAAZ,EAA6BE,UAA7B;IACAL,KAAK,CAACsB,SAAN,CAAgBnB,eAAhB,EAAiCE,UAAjC;IAEAD,kBAAkB,CAAC,EAAD,CAAlB;IACAE,aAAa,CAAC,EAAD,CAAb;EACD,CA1BD;;EA4BA,MAAMiB,qBAAqB,GAAIb,KAAD,IAAW;IACvCN,kBAAkB,CAACM,KAAK,CAACc,MAAN,CAAaV,KAAd,CAAlB;EACD,CAFD;;EAIA,MAAMW,gBAAgB,GAAIf,KAAD,IAAW;IAClCJ,aAAa,CAACI,KAAK,CAACc,MAAN,CAAaV,KAAd,CAAb;EACD,CAFD;;EAIA,MAAMY,YAAY,GAAG,MAAM;IACzB;IACAlB,QAAQ,CAAC,IAAD,CAAR;EACD,CAHD;;EAKA;IAAA;IACE;IACA,QAAC,OAAD;MAAA,WAEGD,KAAK,iBACJ,QAAC,UAAD;QACE,KAAK,EAAEA,KAAK,CAACW,KADf;QAEE,OAAO,EAAEX,KAAK,CAACY,OAFjB;QAGE,SAAS,EAAEO;MAHb;QAAA;QAAA;QAAA;MAAA,QAHJ,eASE,QAAC,IAAD;QAAM,SAAS,EAAE9B,OAAO,CAAC+B,KAAzB;QAAA,uBACE;UAAM,QAAQ,EAAElB,cAAhB;UAAA,wBAME;YAAO,OAAO,EAAC,UAAf;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QANF,eAOE;YACE,EAAE,EAAC,UADL;YAEE,IAAI,EAAC,MAFP;YAGE,KAAK,EAAEN,eAHT;YAIE,QAAQ,EAAEoB,qBAJZ;YAKE,GAAG,EAAEtB;UALP;YAAA;YAAA;YAAA;UAAA,QAPF,eAcE;YAAO,OAAO,EAAC,KAAf;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QAdF,eAeE;YACE,EAAE,EAAC,KADL;YAEE,IAAI,EAAC,QAFP;YAGE,KAAK,EAAEI,UAHT;YAIE,QAAQ,EAAEoB,gBAJZ;YAKE,GAAG,EAAEvB;UALP;YAAA;YAAA;YAAA;UAAA,QAfF,eAsBE,QAAC,MAAD;YAAQ,IAAI,EAAC,QAAb;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QAtBF;QAAA;UAAA;UAAA;UAAA;QAAA;MADF;QAAA;QAAA;QAAA;MAAA,QATF;IAAA;MAAA;MAAA;MAAA;IAAA;EAFF;AAuCD,CApGD;;GAAMH,O;;KAAAA,O;AAsGN,eAAeA,OAAf"},"metadata":{},"sourceType":"module"}