{"ast":null,"code":"var _jsxFileName = \"/Users/jotaehyeon/Desktop/TIL-React/08-Complete_Practice_Project(Max_Example)/src/components/Users/AddUser.js\",\n    _s = $RefreshSig$();\n\n//? Ref allow us to get access to other DOM elements\nimport React, { useState, useRef } from 'react';\nimport Card from '../UI/Card'; // 자바스크립트 파일은 '.js'를 붙이지 않아도 된다.\n\nimport Button from '../UI/Button';\nimport classes from './AddUser.module.css';\nimport Wrapper from '../Helpers/Wrapper';\nimport ErrorModal from '../UI/ErrorModal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AddUser = props => {\n  _s();\n\n  // Ref takes a default value you wanna initialize it to (default값은 undefined)\n  // we can let React know that we wanna connect a ref to a HTML element by going to that element\n  // to which we wanna connect the ref and adding a special prop there, the ref prop.\n  // Just like the key prop, that's a built-in prop which you can add to any HTML element\n  //? you can connect any HTML element to one of your references.\n  //? You will very often do that for inputs because you wanna fetch input data, for example,\n  //? but you can do with any element.\n  //? The Ref value always is an object which always has a current prop\n  //? Ref는 항상 current prop을 가지는 객체를 가지고 있다.\n  //? The current prop holds the actual value that ref is connected with.\n  //! 단순히 value를 read할 때는 Ref를 사용하는 것이 좋다. State방식은 많은 키로거를 발생시킨다.\n  //! Ref는 조금 더 작은 코드를 발생시키지만 Dom을 직접조작하는 부분이 많이 발생한다면 좋지 않다.\n  const nameInputRef = useRef();\n  const ageInputRef = useRef(); // 처음 input에 값이 없기 때문에 State의 초기값은 ''으로 입력된다.\n  // const [enteredUsername, setEnteredUsername] = useState('');\n  // const [enteredAge, setEnteredAge] = useState('');\n\n  const [error, setError] = useState();\n\n  const addUserHandler = event => {\n    event.preventDefault();\n    const enteredname = nameInputRef.current.value;\n    const enteredUserAge = ageInputRef.current.value; // Trim will remove any excess white space.\n\n    if (enteredname.trim().length === 0 || enteredUserAge.trim().length === 0) {\n      setError({\n        title: 'Invalid input',\n        message: 'Please enter a valid name and age (non-empty values).'\n      });\n      return; // 리턴되면서 addUserHandler의 코드는 실행되지 않는다. (return statements finished the function execution.)\n    } // enteredAge가 String이지만, JS에서 일반적으로 숫자로 비교가 가능하다. 하지만, 형변환을 하는 것이 더 안전하기 때문에 +를 붙이는 것이 좋다.\n\n\n    if (+enteredUserAge < 1) {\n      setError({\n        title: 'Invalid age',\n        message: 'Please enter a valid age (> 0).'\n      });\n      return;\n    } // console.log(enteredUsername, enteredAge);\n\n\n    props.onAddUser(enteredname, enteredUserAge); // Rarely use refs to manipulate the DOM.\n    //? 아래와 같은 방식은 Ref가 Dom을 직접 조작하기 때문에 아주 가끔 사용해야한다.\n\n    nameInputRef.current.value = ''; // React를 사용하는 구문이 아니다.\n\n    ageInputRef.current.value = ''; // setEnteredUsername('');\n    // setEnteredAge('');\n  }; // const usernameChangeHandler = (event) => {\n  //   setEnteredUsername(event.target.value);\n  // };\n  // const ageChangeHandler = (event) => {\n  //   setEnteredAge(event.target.value);\n  // };\n\n\n  const errorHandler = () => {\n    // Null is treated as a falsy value,\n    setError(null);\n  };\n\n  return (\n    /*#__PURE__*/\n    // Wrapper has no other meaning than fulfilling this JSX requirement with my wrapper.\n    _jsxDEV(Wrapper, {\n      children: [error && /*#__PURE__*/_jsxDEV(ErrorModal, {\n        title: error.title,\n        message: error.message,\n        onConfirm: errorHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        className: classes.input,\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: addUserHandler,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"username\",\n            children: \"Username\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"username\",\n            type: \"text\" // value={enteredUsername}\n            // onChange={usernameChangeHandler}\n            ,\n            ref: nameInputRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"age\",\n            children: \"Age (Years)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"age\",\n            type: \"number\" // value={enteredAge}\n            // onChange={ageChangeHandler}\n            ,\n            ref: ageInputRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            children: \"Add User\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }, this)\n  );\n};\n\n_s(AddUser, \"oeh9P4do1L6ON2Ex+93ODUUduFk=\");\n\n_c = AddUser;\nexport default AddUser;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddUser\");","map":{"version":3,"names":["React","useState","useRef","Card","Button","classes","Wrapper","ErrorModal","AddUser","props","nameInputRef","ageInputRef","error","setError","addUserHandler","event","preventDefault","enteredname","current","value","enteredUserAge","trim","length","title","message","onAddUser","errorHandler","input"],"sources":["/Users/jotaehyeon/Desktop/TIL-React/08-Complete_Practice_Project(Max_Example)/src/components/Users/AddUser.js"],"sourcesContent":["//? Ref allow us to get access to other DOM elements\nimport React, { useState, useRef } from 'react';\nimport Card from '../UI/Card'; // 자바스크립트 파일은 '.js'를 붙이지 않아도 된다.\nimport Button from '../UI/Button';\nimport classes from './AddUser.module.css';\nimport Wrapper from '../Helpers/Wrapper';\nimport ErrorModal from '../UI/ErrorModal';\n\nconst AddUser = (props) => {\n  // Ref takes a default value you wanna initialize it to (default값은 undefined)\n  // we can let React know that we wanna connect a ref to a HTML element by going to that element\n  // to which we wanna connect the ref and adding a special prop there, the ref prop.\n  // Just like the key prop, that's a built-in prop which you can add to any HTML element\n  //? you can connect any HTML element to one of your references.\n  //? You will very often do that for inputs because you wanna fetch input data, for example,\n  //? but you can do with any element.\n  //? The Ref value always is an object which always has a current prop\n  //? Ref는 항상 current prop을 가지는 객체를 가지고 있다.\n  //? The current prop holds the actual value that ref is connected with.\n  //! 단순히 value를 read할 때는 Ref를 사용하는 것이 좋다. State방식은 많은 키로거를 발생시킨다.\n  //! Ref는 조금 더 작은 코드를 발생시키지만 Dom을 직접조작하는 부분이 많이 발생한다면 좋지 않다.\n\n  const nameInputRef = useRef();\n  const ageInputRef = useRef();\n\n  // 처음 input에 값이 없기 때문에 State의 초기값은 ''으로 입력된다.\n  // const [enteredUsername, setEnteredUsername] = useState('');\n  // const [enteredAge, setEnteredAge] = useState('');\n  const [error, setError] = useState();\n\n  const addUserHandler = (event) => {\n    event.preventDefault();\n    const enteredname = nameInputRef.current.value;\n    const enteredUserAge = ageInputRef.current.value;\n    // Trim will remove any excess white space.\n    if (enteredname.trim().length === 0 || enteredUserAge.trim().length === 0) {\n      setError({\n        title: 'Invalid input',\n        message: 'Please enter a valid name and age (non-empty values).',\n      });\n      return; // 리턴되면서 addUserHandler의 코드는 실행되지 않는다. (return statements finished the function execution.)\n    }\n    // enteredAge가 String이지만, JS에서 일반적으로 숫자로 비교가 가능하다. 하지만, 형변환을 하는 것이 더 안전하기 때문에 +를 붙이는 것이 좋다.\n    if (+enteredUserAge < 1) {\n      setError({\n        title: 'Invalid age',\n        message: 'Please enter a valid age (> 0).',\n      });\n      return;\n    }\n\n    // console.log(enteredUsername, enteredAge);\n    props.onAddUser(enteredname, enteredUserAge);\n\n    // Rarely use refs to manipulate the DOM.\n    //? 아래와 같은 방식은 Ref가 Dom을 직접 조작하기 때문에 아주 가끔 사용해야한다.\n    nameInputRef.current.value = ''; // React를 사용하는 구문이 아니다.\n    ageInputRef.current.value = '';\n    // setEnteredUsername('');\n    // setEnteredAge('');\n  };\n\n  // const usernameChangeHandler = (event) => {\n  //   setEnteredUsername(event.target.value);\n  // };\n\n  // const ageChangeHandler = (event) => {\n  //   setEnteredAge(event.target.value);\n  // };\n\n  const errorHandler = () => {\n    // Null is treated as a falsy value,\n    setError(null);\n  };\n\n  return (\n    // Wrapper has no other meaning than fulfilling this JSX requirement with my wrapper.\n    <Wrapper>\n      {/* if error would be undefined well nothing would be rendered here for this line. */}\n      {error && (\n        <ErrorModal\n          title={error.title}\n          message={error.message}\n          onConfirm={errorHandler}\n        />\n      )}\n      <Card className={classes.input}>\n        <form onSubmit={addUserHandler}>\n          {/* \n         'htmlfor' : the prop name for assigning that for attribute to a label.\n          that they understand which label belongs to which input.\n          htmlfor과 id를 username으로 연결 \n      */}\n          <label htmlFor='username'>Username</label>\n          <input\n            id='username'\n            type='text'\n            // value={enteredUsername}\n            // onChange={usernameChangeHandler}\n            ref={nameInputRef}\n          />\n          <label htmlFor='age'>Age (Years)</label>\n          {/* Ref를 사용하면 uncontrolled components이다.\n          Because they're internal state, so to value which is reflected in them\n          is not controlled by react.\n          We rely on the default behavior of the input where a user of course is able to enter something\n          and that entered value is reflected.\n          And we then just Fetch it, with a react feature but we don't feed data back into the input.\n\n\n          */}\n          <input\n            id='age'\n            type='number'\n            // value={enteredAge}\n            // onChange={ageChangeHandler}\n            ref={ageInputRef}\n          />\n          <Button type='submit'>Add User</Button>\n        </form>\n      </Card>\n    </Wrapper>\n  );\n};\n\nexport default AddUser;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}